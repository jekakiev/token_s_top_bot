const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const settings = require('./config/settings');

const bot = new TelegramBot(process.env.TOKEN, { polling: true });

let waitingFor = {}; // —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è

// ‚úÖ /start
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, 'üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –î–∞–Ω—ñ –∑—á–∏—Ç—É—é—Ç—å—Å—è...');
});

// ‚úÖ /clear (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω)
bot.onText(/\/clear/, (msg) => {
  const userId = msg.from.id;
  if (userId !== settings.ADMIN_ID) {
    return bot.sendMessage(msg.chat.id, '‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.');
  }

      const originPath = path.join(__dirname, 'data', 'origin.json');
    fs.writeFileSync(originPath, JSON.stringify(dataToSave, null, 2));

    // üî• –æ–¥—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É
    const { processInitial } = require('./modules/initialProcessor');
    processInitial();

    delete waitingFor[userId];

    return bot.sendMessage(chatId, '‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ –æ–±—Ä–æ–±–ª–µ–Ω–æ');

});

// ‚úÖ /initial (–≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –¥–∞—Ç–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
bot.onText(/\/initial/, (msg) => {
  if (msg.from.id !== settings.ADMIN_ID) return;

  const chatId = msg.chat.id;
  waitingFor[msg.from.id] = { step: 'awaiting_date' };

  bot.sendMessage(chatId, 'üóì –í–≤–µ–¥–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2025-07-14)');
});

// ‚úÖ –û–±—Ä–æ–±–∫–∞ –±—É–¥—å-—è–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–¥—Ä—É–≥–∞ —á–∞—Å—Ç–∏–Ω–∞ –¥–ª—è /initial)
bot.on('message', (msg) => {
  const userId = msg.from.id;
  const chatId = msg.chat.id;

  if (!waitingFor[userId]) return;

  const state = waitingFor[userId];

  if (state.step === 'awaiting_date') {
    const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
    if (!dateRegex.test(msg.text)) {
      return bot.sendMessage(chatId, '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑: YYYY-MM-DD');
    }

    waitingFor[userId] = { step: 'awaiting_message', date: msg.text };
    return bot.sendMessage(chatId, 'üì® –¢–µ–ø–µ—Ä –ø–µ—Ä–µ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ /top (–≤—ñ–¥ –±–æ—Ç–∞ @yosoyass_bot)');
  }

  if (state.step === 'awaiting_message') {
    const rawText = msg.text;

    if (!rawText || !rawText.includes('S-points')) {
      return bot.sendMessage(chatId, '‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ–º–∞–Ω–¥–∏ /top. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
    }

    const dataToSave = {
      date: state.date,
      raw: rawText
    };

    fs.writeFileSync(path.join(__dirname, 'data', 'origin.json'), JSON.stringify(dataToSave, null, 2));

    delete waitingFor[userId];

    return bot.sendMessage(chatId, '‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ `origin.json`');
  }
});
