const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const settings = require('./config/settings');

const bot = new TelegramBot(process.env.TOKEN, { polling: true });
let waitingFor = {}; // —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è

// ‚úÖ /start
bot.on('message', async (msg) => {
  console.log('üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º:', msg.text);
  console.log('‚û°Ô∏è –ü–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', msg);

  if (msg.text === '/start') {
    bot.sendMessage(msg.chat.id, 'üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –î–∞–Ω—ñ –∑—á–∏—Ç—É—é—Ç—å—Å—è...');
  }
});

// ‚úÖ /clear (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω)
bot.onText(/\/clear/, (msg) => {
  if (msg.from.id !== settings.ADMIN_ID) {
    return bot.sendMessage(msg.chat.id, '‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.');
  }

  const dataPath = path.join(__dirname, 'data');

  fs.writeFileSync(path.join(dataPath, 'history.json'), '{}');
  fs.writeFileSync(path.join(dataPath, 'balance.json'), '{}');
  fs.writeFileSync(path.join(dataPath, 'origin.json'), '{}');

  bot.sendMessage(msg.chat.id, '‚úÖ –í—Å—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–∞ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω—ñ.');
});

// ‚úÖ /initial
bot.onText(/\/initial/, (msg) => {
  if (msg.from.id !== settings.ADMIN_ID) return;

  const chatId = msg.chat.id;
  waitingFor[msg.from.id] = { step: 'awaiting_date' };
  bot.sendMessage(chatId, 'üóì –í–≤–µ–¥–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2025-07-14)');
});

// ‚úÖ /help
bot.onText(/\/help/, (msg) => {
  if (msg.from.id !== settings.ADMIN_ID) return;

  const helpText = `
üìñ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
/initial ‚Äî –≤–Ω–µ—Å—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—É –¥–∞—Ç—É + –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ /top
/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —ñ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
/show_points ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—ñ–Ω—Ç—ñ–≤
/show_tokens ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —ñ—Å—Ç–æ—Ä—ñ—é —Ç–æ–∫–µ–Ω—ñ–≤
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É
  `.trim();

  bot.sendMessage(msg.chat.id, helpText);
});

// ‚úÖ /show_points
bot.onText(/\/show_points/, (msg) => {
  if (msg.from.id !== settings.ADMIN_ID) return;

  const historyPath = path.join(__dirname, 'data', 'history.json');
  if (!fs.existsSync(historyPath)) {
    return bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –§–∞–π–ª history.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
  }

  const data = JSON.parse(fs.readFileSync(historyPath, 'utf-8'));
  const text = 'üìò Points history:\n\n' + Object.entries(data).map(([nick, records]) => {
    return `üë§ ${nick}:\n` + records.map(r => `üìÖ ${r.date}: ${r.sPoints}`).join('\n');
  }).join('\n\n');

  bot.sendMessage(msg.chat.id, text.length > 4096 ? text.slice(0, 4096) + '\n... (–æ–±—Ä—ñ–∑–∞–Ω–æ)' : text);
});

// ‚úÖ /show_tokens
bot.onText(/\/show_tokens/, (msg) => {
  if (msg.from.id !== settings.ADMIN_ID) return;

  const balancePath = path.join(__dirname, 'data', 'balance.json');
  if (!fs.existsSync(balancePath)) {
    return bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –§–∞–π–ª balance.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
  }

  const data = JSON.parse(fs.readFileSync(balancePath, 'utf-8'));
  const text = 'üí∞ Token balances:\n\n' + Object.entries(data).map(([nick, records]) => {
    return `üë§ ${nick}:\n` + records.map(r => `üìÖ ${r.date}: ${r.tokens}`).join('\n');
  }).join('\n\n');

  bot.sendMessage(msg.chat.id, text.length > 4096 ? text.slice(0, 4096) + '\n... (–æ–±—Ä—ñ–∑–∞–Ω–æ)' : text);
});

// ‚úÖ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤–∫–ª—é—á–∞—é—á–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –∑ /top)
bot.on('message', async (msg) => {
  const userId = msg.from.id;
  const chatId = msg.chat.id;

  if (!waitingFor[userId]) return;

  const state = waitingFor[userId];

  if (state.step === 'awaiting_date') {
    const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
    if (!dateRegex.test(msg.text)) {
      return bot.sendMessage(chatId, '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑: YYYY-MM-DD');
    }

    waitingFor[userId] = { step: 'awaiting_message', date: msg.text };
    return bot.sendMessage(chatId, 'üì® –¢–µ–ø–µ—Ä –ø–µ—Ä–µ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ /top (–≤—ñ–¥ –±–æ—Ç–∞ @yosoyass_bot)');
  }

  if (state.step === 'awaiting_message') {
    const rawText = msg.text || msg.caption || '';
    console.log('üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º:', rawText.slice(0, 80));

    if (!rawText || rawText.length < 20) {
      return bot.sendMessage(chatId, '‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–≥–ª—è–¥–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–º –∞–±–æ –Ω–µ–ø—Ä–∏–¥–∞—Ç–Ω–∏–º. –°–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ —â–µ —Ä–∞–∑.');
    }

        try {
      const dataToSave = {
        date: state.date,
        raw: rawText
      };

      fs.writeFileSync(path.join(__dirname, 'data', 'origin.json'), JSON.stringify(dataToSave, null, 2));
      bot.sendMessage(chatId, '‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ origin.json');

      console.log('üì¶ –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è processInitial –∑ –¥–∞—Ç–æ—é:', state.date);
      const { processInitial } = require('./modules/initialProcessor');
      await processInitial(state.date, rawText);

      bot.sendMessage(chatId, 'üìä –î–∞–Ω—ñ –æ–±—Ä–æ–±–ª–µ–Ω–æ: –ø–æ—ñ–Ω—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, —Ç–æ–∫–µ–Ω–∏ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ.');
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ processInitial:\n', err.stack || err);
      bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: ${err.message || '–Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`);
    }


    delete waitingFor[userId];
  }
});
