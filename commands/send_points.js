const fs = require('fs-extra');
const path = require('path');
const dayjs = require('dayjs');
const { ADMIN_ID } = require('../config');

module.exports = (bot) => {
  bot.command('send_points', async (ctx) => {
    if (ctx.from.id !== ADMIN_ID) {
      await ctx.reply('‚õîÔ∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }

    const historyDir = path.join('/data', 'history');
    const pointsPath = path.join(historyDir, 'points.json');

    if (!(await fs.pathExists(pointsPath))) {
      await ctx.reply('‚ö†Ô∏è –§–∞–π–ª points.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }

    const points = await fs.readJson(pointsPath);
    const today = dayjs().format('YYYY-MM-DD');
    const lastData = [];

    for (const [nick, entries] of Object.entries(points)) {
      const last = entries.at(-1); // –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å
      if (last) {
        lastData.push({ nick, sPoints: last.sPoints });
      }
    }

    const sorted = lastData.sort((a, b) => b.sPoints - a.sPoints);

    const lines = sorted.map((user, i) => {
      return `${i + 1}. ${user.nick} S-points: ${user.sPoints}`;
    });

    const chunks = chunkMessage(lines, 50); // –†–æ–∑—ñ–±‚Äô—î–º–æ –ø–æ 50 –∑–∞–ø–∏—Å—ñ–≤ —É –∫–æ–∂–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ

    await ctx.reply(`üîÑ –ù–∞–¥—Å–∏–ª–∞—é —Ç–æ–ø ${sorted.length} —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑–∞ ${today}...`);

    for (const part of chunks) {
      const message = `üìä –¢–æ–ø –Ω–∞ ${today}\n\n\`\`\`\n${part.join('\n')}\n\`\`\``;
      await bot.telegram.sendMessage('@token_s_top', message, {
        parse_mode: 'Markdown',
        disable_web_page_preview: true,
      });
    }

    await ctx.reply(`‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ${chunks.length} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É @token_s_top`);
  });
};

// üîπ –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: —Ä–æ–∑–¥—ñ–ª—è—î –º–∞—Å–∏–≤ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ N –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
function chunkMessage(array, size) {
  const chunks = [];
  for (let i = 0; i < array.length; i += size) {
    chunks.push(array.slice(i, i + size));
  }
  return chunks;
}
