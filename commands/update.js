const fs = require('fs-extra');
const path = require('path');
const dayjs = require('dayjs');
const { ADMIN_ID } = require('../config');

module.exports = (bot) => {
  bot.command('update', async (ctx) => {
    if (ctx.from.id !== ADMIN_ID) {
      await ctx.reply('‚õîÔ∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }

    await ctx.reply(
      'üì• –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–º–∞–Ω–¥–æ—é /top –≤—ñ–¥ @yosoyass_bot.\n–Ø –ø–µ—Ä–µ–≤—ñ—Ä—é, —á–∏ —î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.'
    );
  });

  bot.on('message', async (ctx) => {
    if (ctx.message?.forward_from?.username !== 'yosoyass_bot') return;

    const message = ctx.message.text;
    const today = dayjs().format('YYYY-MM-DD');
    const historyDir = path.join('/data', 'history');
    const updatedFileName = `STOP_updated_${today}.json`;
    const updatedFilePath = path.join(historyDir, updatedFileName);

    await fs.ensureDir(historyDir);

    // 1Ô∏è‚É£ –Ø–∫—â–æ —Ñ–∞–π–ª –≤–∂–µ —ñ—Å–Ω—É—î —ñ —Ç–µ–∫—Å—Ç —Ç–∞–∫–∏–π —Å–∞–º–∏–π
    if (await fs.pathExists(updatedFilePath)) {
      const existing = await fs.readJson(updatedFilePath);
      if (existing.message === message) {
        await ctx.reply('‚ÑπÔ∏è –î–∞–Ω—ñ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—å. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ.');
        return;
      }
    }

    // 2Ô∏è‚É£ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª
    await fs.writeJson(updatedFilePath, { date: today, message }, { spaces: 2 });

    // 3Ô∏è‚É£ –ü–∞—Ä—Å–∏–º–æ S-points
    const regex = /\d+\.\s+(.+?)\s+S-points:\s*([\d\s]+)/g;
    const topList = [];
    let match;
    while ((match = regex.exec(message)) !== null) {
      const nick = match[1].trim();
      const sPoints = parseInt(match[2].replace(/\s/g, ''), 10);
      if (!isNaN(sPoints)) {
        topList.push({ nick, sPoints });
      }
    }

    // 4Ô∏è‚É£ –û–Ω–æ–≤–ª—é—î–º–æ points.json
    const pointsPath = path.join(historyDir, 'points.json');
    let points = {};
    if (await fs.pathExists(pointsPath)) {
      points = await fs.readJson(pointsPath);
    }

    for (const { nick, sPoints } of topList) {
      if (!points[nick]) points[nick] = [];
      points[nick].push({ date: today, sPoints });
    }

    await fs.writeJson(pointsPath, points, { spaces: 2 });

    await ctx.reply(`‚úÖ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ ${today} —ñ –¥–æ–¥–∞–Ω–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó.`);
  });
};
